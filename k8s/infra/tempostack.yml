apiVersion: v1
kind: Secret
metadata:
  name: s3-bucket
  namespace: tempostack
stringData:
  endpoint: ${S3_ENDPOINT}
  bucket: "tempostorage"
  access_key_id: ${AWS_ACCESS_KEY_ID}
  access_key_secret: ${AWS_SECRET_ACCESS_KEY}
type: Opaque
---
apiVersion: tempo.grafana.com/v1alpha1
kind: TempoStack
metadata:
  name: tempostack
  namespace: tempostack
spec:
  storageSize: 1Gi
  storage:
    secret:
      name: s3-bucket
      type: s3
    tls:
      enabled: false
  resources:
    total:
      limits:
        memory: 2Gi
        cpu: 2000m
  tenants:
    mode: openshift
    authentication:
      - tenantName: demo
        tenantId: "demo-tenant"
  template:
    gateway:
      enabled: true
    queryFrontend:
      jaegerQuery:
        enabled: false
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: tempostack-traces-reader
rules:
  - apiGroups:
      - 'tempo.grafana.com'
    resources:
      - demo
    resourceNames:
      - traces
    verbs:
      - 'get'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: tempostack-traces-reader
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: tempostack-traces-reader
subjects:
  - kind: Group
    apiGroup: rbac.authorization.k8s.io
    name: system:authenticated
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: view
  namespace: tempostack
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: view
subjects:
- kind: ServiceAccount
  name: default
  namespace: tempostack